{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "f_manutencoes",
      "lineageTag": "579c5ef4-9dac-406b-a41a-25e77682eb39",
      "queryGroupId": "5f883ed9-cd43-4998-b62e-fe07c6616bb7",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    planilha = \"Tabela Manutenção.xlsx\",",
        "    arquivo_xlsx = Text.Combine({dir_xlsx, planilha}),",
        "    ",
        "    Fonte = Excel.Workbook(File.Contents(arquivo_xlsx), null, true),",
        "    Planilha1_Sheet = Fonte{[Item=\"Planilha1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Cabeçalhos Promovidos\" = Table.PromoteHeaders(Planilha1_Sheet, [PromoteAllScalars=true]),",
        "    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabeçalhos Promovidos\",{{\"Placa\", type text}, {\"Data Hora Início\", type datetime}, {\"Data Hora Fim 2\", type datetime}})",
        "in",
        "    #\"Tipo Alterado\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    planilha = \\\"Tabela Manutenção.xlsx\\\",\\n    arquivo_xlsx = Text.Combine({dir_xlsx, planilha}),\\n    \\n    Fonte = Excel.Workbook(File.Contents(arquivo_xlsx), null, true),\\n    Planilha1_Sheet = Fonte{[Item=\\\"Planilha1\\\",Kind=\\\"Sheet\\\"]}[Data],\\n    #\\\"Cabeçalhos Promovidos\\\" = Table.PromoteHeaders(Planilha1_Sheet, [PromoteAllScalars=true]),\\n    #\\\"Tipo Alterado\\\" = Table.TransformColumnTypes(#\\\"Cabeçalhos Promovidos\\\",{{\\\"Placa\\\", type text}, {\\\"Data Hora Início\\\", type datetime}, {\\\"Data Hora Fim 2\\\", type datetime}})\\nin\\n    #\\\"Tipo Alterado\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "f_ocorrencias",
      "lineageTag": "ecf16bcd-62e5-4199-99cf-72b561ad27e2",
      "queryGroupId": "5f883ed9-cd43-4998-b62e-fe07c6616bb7",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    planilha = \"Tabela Ocorrencias.xlsx\",",
        "    arquivo_xlsx = Text.Combine( {dir_xlsx, planilha} ),",
        "    ",
        "    Fonte = Excel.Workbook(File.Contents(arquivo_xlsx), null, true),",
        "    Planilha1_Sheet = Fonte{[Item=\"Planilha1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Cabeçalhos Promovidos\" = Table.PromoteHeaders(Planilha1_Sheet, [PromoteAllScalars=true]),",
        "    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabeçalhos Promovidos\",{{\"Causa\", type text}, {\"Data Hora Abertura\", type datetime}, {\"Data Hora Fechamento\", type datetime}, {\"Problema\", type text}, {\"ORDEM\", Int64.Type}, {\"Placa\", type text}, {\"Origem\", type text}})",
        "in",
        "    #\"Tipo Alterado\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    planilha = \\\"Tabela Ocorrencias.xlsx\\\",\\n    arquivo_xlsx = Text.Combine( {dir_xlsx, planilha} ),\\n    \\n    Fonte = Excel.Workbook(File.Contents(arquivo_xlsx), null, true),\\n    Planilha1_Sheet = Fonte{[Item=\\\"Planilha1\\\",Kind=\\\"Sheet\\\"]}[Data],\\n    #\\\"Cabeçalhos Promovidos\\\" = Table.PromoteHeaders(Planilha1_Sheet, [PromoteAllScalars=true]),\\n    #\\\"Tipo Alterado\\\" = Table.TransformColumnTypes(#\\\"Cabeçalhos Promovidos\\\",{{\\\"Causa\\\", type text}, {\\\"Data Hora Abertura\\\", type datetime}, {\\\"Data Hora Fechamento\\\", type datetime}, {\\\"Problema\\\", type text}, {\\\"ORDEM\\\", Int64.Type}, {\\\"Placa\\\", type text}, {\\\"Origem\\\", type text}})\\nin\\n    #\\\"Tipo Alterado\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "f_viagens",
      "lineageTag": "2d96753c-b426-4c45-8467-b80b9a0651e7",
      "queryGroupId": "5f883ed9-cd43-4998-b62e-fe07c6616bb7",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    planilha = \"Tabela Viagens.xlsx\",",
        "    arquivo_xlsx = Text.Combine( {dir_xlsx, planilha} ),",
        "    ",
        "    Fonte = Excel.Workbook(File.Contents(arquivo_xlsx), null, true),",
        "    Planilha1_Sheet = Fonte{[Item=\"Planilha1\",Kind=\"Sheet\"]}[Data],",
        "    #\"Cabeçalhos Promovidos\" = Table.PromoteHeaders(Planilha1_Sheet, [PromoteAllScalars=true]),",
        "    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabeçalhos Promovidos\",{{\"Placa\", type text}, {\"ORDEM\", Int64.Type}, {\"ID Viagem\", type text}, {\"Cadastro da viagem\", type datetime}, {\"Status monitoramento\", type text}, {\"Status viagem\", type text}, {\"Operação da viagem\", type text}, {\"Origem\", type text}, {\"Entrada na origem\", type datetime}, {\"Saída da origem\", type datetime}, {\"CPF_CNPJ\", Int64.Type}, {\"Cliente\", type text}, {\"Entrada na entrega\", type datetime}, {\"Saída da entrega\", type datetime}, {\"Destino\", type text}, {\"Entrada no destino\", type datetime}, {\"Saída do destino\", type datetime}, {\"Índice\", Int64.Type}}),",
        "",
        "    // corrigir dados invalidos oriundos do Excel...",
        "    #\"@AddColClienteSemErro\" = Table.AddColumn(#\"Tipo Alterado\", \"ClienteSemErro\", each try [Cliente] otherwise null),",
        "    #\"@AddColDestinoSemErro\" = Table.AddColumn(#\"@AddColClienteSemErro\", \"DestinoSemErro\", each try [Destino] otherwise null),",
        "    #\"@DelColOriginais\" = Table.RemoveColumns(#\"@AddColDestinoSemErro\", {\"Cliente\", \"Destino\"}),",
        "    #\"@RenColunasCorrigidas\" = Table.RenameColumns(#\"@DelColOriginais\", {{\"ClienteSemErro\", \"Cliente\"}, {\"DestinoSemErro\", \"Destino\"}}),",
        "    #\"@TypeColunasCorrigidas\" = Table.TransformColumnTypes(#\"@RenColunasCorrigidas\",{{\"Cliente\", type text}, {\"Destino\", type text}, {\"Cadastro da viagem\", type datetime}}),",
        "    #\"Data Extraída\" = Table.TransformColumns(#\"@TypeColunasCorrigidas\",{{\"Cadastro da viagem\", DateTime.Date, type date}}),",
        "    #\"Linhas Filtradas\" = Table.SelectRows(#\"Data Extraída\", each ([Saída do destino] <> null)),",
        "    #\"Linhas Classificadas\" = Table.Sort(#\"Linhas Filtradas\",{{\"ID Viagem\", Order.Ascending}}),",
        "    #\"@AddTempoOrigem\" = Table.AddColumn(",
        "        #\"Linhas Classificadas\",",
        "        \"tempo_origem\", each ",
        "        if Time.From([Saída da origem]) > Time.FromText(\"08:00:00\") then ",
        "            Time.From([Saída da origem]) - Time.FromText(\"08:00:00\")",
        "        else ",
        "            0",
        "    ),",
        "    #\"Função Personalizada Invocada\" = Table.AddColumn(#\"@AddTempoOrigem\", \"hu_origem\", each fx_horas_uteis([Entrada na origem], [Saída da origem]))",
        "in",
        "    #\"Função Personalizada Invocada\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    planilha = \\\"Tabela Viagens.xlsx\\\",\\n    arquivo_xlsx = Text.Combine( {dir_xlsx, planilha} ),\\n    \\n    Fonte = Excel.Workbook(File.Contents(arquivo_xlsx), null, true),\\n    Planilha1_Sheet = Fonte{[Item=\\\"Planilha1\\\",Kind=\\\"Sheet\\\"]}[Data],\\n    #\\\"Cabeçalhos Promovidos\\\" = Table.PromoteHeaders(Planilha1_Sheet, [PromoteAllScalars=true]),\\n    #\\\"Tipo Alterado\\\" = Table.TransformColumnTypes(#\\\"Cabeçalhos Promovidos\\\",{{\\\"Placa\\\", type text}, {\\\"ORDEM\\\", Int64.Type}, {\\\"ID Viagem\\\", type text}, {\\\"Cadastro da viagem\\\", type datetime}, {\\\"Status monitoramento\\\", type text}, {\\\"Status viagem\\\", type text}, {\\\"Operação da viagem\\\", type text}, {\\\"Origem\\\", type text}, {\\\"Entrada na origem\\\", type datetime}, {\\\"Saída da origem\\\", type datetime}, {\\\"CPF_CNPJ\\\", Int64.Type}, {\\\"Cliente\\\", type text}, {\\\"Entrada na entrega\\\", type datetime}, {\\\"Saída da entrega\\\", type datetime}, {\\\"Destino\\\", type text}, {\\\"Entrada no destino\\\", type datetime}, {\\\"Saída do destino\\\", type datetime}, {\\\"Índice\\\", Int64.Type}}),\\n\\n    // corrigir dados invalidos oriundos do Excel...\\n    #\\\"@AddColClienteSemErro\\\" = Table.AddColumn(#\\\"Tipo Alterado\\\", \\\"ClienteSemErro\\\", each try [Cliente] otherwise null),\\n    #\\\"@AddColDestinoSemErro\\\" = Table.AddColumn(#\\\"@AddColClienteSemErro\\\", \\\"DestinoSemErro\\\", each try [Destino] otherwise null),\\n    #\\\"@DelColOriginais\\\" = Table.RemoveColumns(#\\\"@AddColDestinoSemErro\\\", {\\\"Cliente\\\", \\\"Destino\\\"}),\\n    #\\\"@RenColunasCorrigidas\\\" = Table.RenameColumns(#\\\"@DelColOriginais\\\", {{\\\"ClienteSemErro\\\", \\\"Cliente\\\"}, {\\\"DestinoSemErro\\\", \\\"Destino\\\"}}),\\n    #\\\"@TypeColunasCorrigidas\\\" = Table.TransformColumnTypes(#\\\"@RenColunasCorrigidas\\\",{{\\\"Cliente\\\", type text}, {\\\"Destino\\\", type text}, {\\\"Cadastro da viagem\\\", type datetime}}),\\n    #\\\"Data Extraída\\\" = Table.TransformColumns(#\\\"@TypeColunasCorrigidas\\\",{{\\\"Cadastro da viagem\\\", DateTime.Date, type date}}),\\n    #\\\"Linhas Filtradas\\\" = Table.SelectRows(#\\\"Data Extraída\\\", each ([Saída do destino] <> null)),\\n    #\\\"Linhas Classificadas\\\" = Table.Sort(#\\\"Linhas Filtradas\\\",{{\\\"ID Viagem\\\", Order.Ascending}}),\\n    #\\\"@AddTempoOrigem\\\" = Table.AddColumn(\\n        #\\\"Linhas Classificadas\\\",\\n        \\\"tempo_origem\\\", each \\n        if Time.From([Saída da origem]) > Time.FromText(\\\"08:00:00\\\") then \\n            Time.From([Saída da origem]) - Time.FromText(\\\"08:00:00\\\")\\n        else \\n            0\\n    )\\n    \\n    // DateTime.FromText(Text.Start(Text.From([NomeDaColuna]), 16))\\n\\n    // , #\\\"@AddTempoEntrega\\\" = Table.AddColumn(\\n    //     #\\\"@AddTempoOrigem\\\",\\n    //     \\\"tempo_enrega\\\", each \\n    //     if Time.From([Saída da entrega]) > Time.FromText(\\\"08:00:00\\\") then \\n    //         Time.From([Saída da entrega]) - Time.FromText(\\\"08:00:00\\\")\\n    //     else \\n    //         0\\n    // )\\nin\\n    #\\\"@AddTempoOrigem\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "d_calendario",
      "lineageTag": "9127dd74-60c4-4bbf-b864-147f1456e4e7",
      "queryGroupId": "0a66c16a-f930-4837-98ad-1c79b1c61585",
      "navigationStepName": "Navegação",
      "text": [
        "let ",
        "    //Especifique a data inicial e final do projeto",
        "    menor_ano_entre_tabelas = Date.Year(",
        "        Date.From(",
        "            List.Min(                               // colocar aqui a lista de tabelas a analisar (somente tabelas fato)",
        "                f_viagens[Cadastro da viagem]",
        "            )",
        "        )",
        "    ),",
        "    maior_data_entre_tabelas = Date.From(",
        "        List.Max(                                   // colocar aqui a lista de tabelas a analisar (somente tabelas fato)",
        "            f_viagens[Cadastro da viagem] ",
        "        )",
        "    ),",
        "    dataInicial = #date ( menor_ano_entre_tabelas, 1, 1 ), ",
        "    dataFinal = Date.EndOfYear ( Date.From ( maior_data_entre_tabelas ) ), ",
        "    ",
        "",
        "",
        "",
        "    //Especifique a data atual. Padrão: Data atual do servidor ",
        "    dataAtual = Date.From ( DateTime.LocalNow ( ) ), ",
        "",
        "    //Especifique o início da semana. Padrão: Day.Monday (Segunda-feira) ",
        "    inicioSemana = Day.Monday, ",
        "",
        "    //Especifique o mês do início do ano fiscal. Padrão: 4 (Abril)",
        "    mesInicioAnoFiscal = 4, ",
        "",
        "    /*Dia de início do mês de fechamento. ",
        "        Padrão: 16 (siginifica que o mês de fechamento vai de 16 do mês corrente ",
        "        até o dia 15 do próximo mês */",
        "    diaInicioMesFechamento = 16, ",
        "",
        "    //Especifique o idioma. Padrão: pt-BR (Português do Brasil)",
        "    idioma = \"pt-BR\", ",
        "",
        "    //Geração da tabela",
        "    dCalendario = let",
        "",
        "    //Lista com todas as datas ",
        "    datasRange = List.Buffer ( ",
        "        List.Transform ( ",
        "            { Number.From ( dataInicial ) .. Number.From ( dataFinal ) }, ",
        "            Date.From ",
        "        ) ",
        "    ), ",
        "",
        "    //Lista com todos os anos ",
        "    anosRange = List.Buffer ( ",
        "        { Date.Year ( dataInicial ) .. Date.Year ( dataFinal )} ",
        "    ), ",
        "",
        "    //Feriados fixos que ocorrem em todos os anos ",
        "    feriadosFixosCadastro = #table ( ",
        "        type table [ ",
        "            Dia = Int64.Type, ",
        "            Mes = Int64.Type, ",
        "            Feriado = text ",
        "        ],",
        "        {",
        "          // Dia, Mês, Feriado",
        "                 { 01, 01, \"Confraternização Universal\"   }",
        "            // , { 25, 01, \"Aniversário da Cidade\"        } ",
        "               , { 21, 04, \"Tiradentes\"                   } ",
        "               , { 01, 05, \"Dia do Trabalhador\"           } ",
        "            // , { 09, 07, \"Revolução Constitucionalista\" } ",
        "               , { 07, 09, \"Independência do Brasil\"      } ",
        "               , { 12, 10, \"N. Srª Aparecida\"             } ",
        "               , { 02, 11, \"Finados\"                      } ",
        "               , { 15, 11, \"Proclamação da República\"     } ",
        "            // , { 20, 11, \"Consciência Negra\"            } ",
        "            // , { 24, 12, \"Véspera de Natal\"             } ",
        "               , { 25, 12, \"Natal\"                        } ",
        "            // , { 31, 12, \"Véspera de Ano Novo\"          } ",
        "        } ",
        "    ), ",
        "",
        "    //Função que gera os feriados fixos para todos os anos ",
        "    fxGeraFeriadosFixos = ( ano ) => ",
        "        Table.AddColumn ( ",
        "            feriadosFixosCadastro, ",
        "            \"Data\", ",
        "            each #date ( ano, [Mes], [Dia] ), ",
        "            type date ",
        "        ) ",
        "        [ [Data], [Feriado] ], ",
        "",
        "    //Gera a tabela de feriados fixos ",
        "    feriadosFixos = Table.Combine ( ",
        "        List.Transform ( ",
        "            anosRange, ",
        "            fxGeraFeriadosFixos ",
        "        ) ",
        "    ), ",
        "",
        "    //Função que gera os feriados móveis ",
        "    fxGeraFeriadosMoveis = ( ano ) => ",
        "        let ",
        "            modExcel =  ( x, y ) => let m = Number.Mod ( x, y ) in if  m < 0 then m + y else m, ",
        "            pascoa =  Date.From ( ",
        "                Number.Round ( ",
        "                    Number.From ( #date ( ano, 4, 1 ) ) / 7 ",
        "                    +  modExcel ( 19 * modExcel ( ano, 19 ) - 7, 30 ) * 0.14, ",
        "                    0, ",
        "                    RoundingMode.Up ",
        "                ) ",
        "                * 7 - 6 ",
        "            ), ",
        "            feriadosMoveis =  #table ( ",
        "                type table [ ",
        "                    Data = date, ",
        "                    Feriado = text ",
        "                ], ",
        "                { ",
        "                    ",
        "                         { Date.AddDays(pascoa, -2  ), \"Sexta-Feira Santa\"          } ",
        "                       , { pascoa                    , \"Páscoa\"                     }",
        "                       , { Date.AddDays(pascoa, 60  ), \"Corpus Christi\"             }",
        "                    // , { Date.AddDays(pascoa, -48 ), \"Segunda-feira de Carnaval\"  }",
        "                    // , { Date.AddDays(pascoa, -47 ), \"Terça-feira de Carnaval\"    }",
        "                    // , { Date.AddDays(pascoa, -46 ), \"Quarta-feira de Cinzas\"     }",
        "                } ",
        "            ) ",
        "        in ",
        "            feriadosMoveis, ",
        "",
        "    //Gera a tabela de feriados móveis ",
        "    feriadosMoveis = Table.Combine ( ",
        "        List.Transform ( ",
        "            anosRange, ",
        "            fxGeraFeriadosMoveis ",
        "        ) ",
        "    ),  ",
        "",
        "    //Tabela contendo todos os feriados ",
        "    feriados = Table.Combine ( ",
        "        { feriadosFixos, feriadosMoveis } ",
        "    ), ",
        "",
        "    //Define a função de transformação de cada data ",
        "    fxLinhaCalendario = ( data ) => ",
        "        let ",
        "        //Transformações de simples passada para reutilização",
        "            zws = Character.FromNumber ( 8203 ), //Caracter invisível (zero-width spacing )",
        "            dataOffset = Number.From ( data - dataAtual ), ",
        "            ano = Date.Year ( data ), ",
        "            mes = Date.Month ( data ), ",
        "            trimestre = Date.QuarterOfYear ( data ), ",
        "            anoInicial = Date.Year ( dataInicial ), ",
        "            anoAtual = Date.Year ( dataAtual ), ",
        "            anoFinal = Date.Year ( dataFinal ), ",
        "            anoOffset = ano - anoAtual, ",
        "            mesInicial = Date.Month ( dataInicial ), ",
        "            mesAtual = Date.Month ( dataAtual ), ",
        "            trimestreInicial = Date.QuarterOfYear ( dataInicial ), ",
        "            trimestreAtual = Date.QuarterOfYear ( dataAtual ), ",
        "            diaSemana = Date.DayOfWeek ( data, inicioSemana ) + 1, ",
        "            diaSemanaIndiceZws = Text.Repeat ( zws, 7 - diaSemana ), ",
        "            semanaDoAnoIsoNo = ",
        "                let ",
        "                    quintaNaSemana = Date.AddDays ( data, 3 - Date.DayOfWeek ( data, Day.Monday ) ), ",
        "                    inicioAnoQuintaNaSemana = #date ( Date.Year ( quintaNaSemana ), 1, 1 ), ",
        "                    difDias = Duration.Days ( quintaNaSemana - inicioAnoQuintaNaSemana ) ",
        "                in ",
        "                    Number.IntegerDivide ( difDias, 7, 0 ) + 1, ",
        "            semanaDoAnoNum = Date.WeekOfYear ( data, inicioSemana ), ",
        "            diaSemanaNome = Text.Proper ( Date.DayOfWeekName ( data, idioma ) ), ",
        "            mesNome = Text.Proper ( Date.MonthName ( data, idioma ) ), ",
        "            mesIndiceZws = Text.Repeat ( zws, 12 - mes ), ",
        "            mesAnoIndice = 12 * ( ano - anoInicial ) + mes, ",
        "            inicioMes = Date.StartOfMonth ( data ),",
        "            fimMes = Date.EndOfMonth ( data ),",
        "            diaMes = Date.Day ( data ), ",
        "            mesOffset =  ( ( ano * 12 ) - 1 + mes ) - ( ( anoAtual * 12 ) - 1 + mesAtual ), ",
        "            trimestreOffset = ( ( ano * 4 ) - 1 + trimestre ) - ( ( anoAtual * 4 ) - 1 + trimestreAtual ), ",
        "            trimestreAno = \"T\" & Text.From ( trimestre ) & \"/\" & Text.From ( ano ), ",
        "            anoIso = Date.Year ( Date.AddDays ( data, 26 - semanaDoAnoIsoNo ) ), ",
        "            inicioSemanaIsoLinha = Date.StartOfWeek ( data, Day.Monday ), ",
        "            fimSemanaIsoLinha = Date.EndOfWeek ( data, Day.Monday ), ",
        "            inicioSemanaLinha = Date.StartOfWeek ( data, inicioSemana ), ",
        "            fimSemanaLinha = Date.EndOfWeek ( data, inicioSemana ), ",
        "            inicioSemanaIsoInicial = Date.StartOfWeek ( data, Day.Monday ), ",
        "            inicioSemanaInicial = Date.StartOfWeek ( dataInicial, inicioSemana ), ",
        "            inicioSemanaIsoAtual = Date.StartOfWeek ( dataAtual, Day.Monday ),",
        "            inicioSemanaAtual = Date.StartOfWeek ( dataAtual, inicioSemana ), ",
        "            semanaIsoOffset = Number.From ( inicioSemanaIsoLinha - inicioSemanaIsoAtual ) / 7,",
        "            semanaOffset = Number.From ( inicioSemanaLinha - inicioSemanaAtual ) / 7, ",
        "            semanaAnoIso = \"S\" & Text.PadStart ( Text.From ( semanaDoAnoIsoNo ), 2, \"0\" ) & \"/\" & Text.From ( anoIso ), ",
        "            semanaAno = \"S\" & Text.PadStart ( Text.From ( semanaDoAnoNum ), 2, \"0\" ) & \"/\" & Text.From ( ano ), ",
        "            semanaDoMes = ",
        "                let ",
        "                    inicioMes = Date.StartOfMonth ( Date.StartOfWeek ( data,inicioSemana ) ), ",
        "                    primeirosSeteDias = List.Dates ( inicioMes, 7, #duration ( 1, 0, 0, 0 ) ), ",
        "                    primeiroDia = List.Select ( primeirosSeteDias, each Date.DayOfWeek ( _, inicioSemana ) = 0 ) { 0 } ",
        "                in ",
        "                    Number.RoundUp ( Duration.Days ( data-primeiroDia ) / 7 + 0.05 ), ",
        "            anoSemanal = Date.Year ( inicioSemanaLinha ), ",
        "            mesSemanal = Date.Month ( inicioSemanaLinha ) , ",
        "            mesSemanalNome = Text.Proper ( Date.MonthName ( inicioSemanaLinha, idioma ) ), ",
        "            mesSemanalNomeAbrev = Text.Start ( mesSemanalNome, 3 ), ",
        "            semanaDoMesPadraoNum = Date.WeekOfMonth ( data, inicioSemana ), ",
        "            quinzenaDoMesNo = if Date.Day ( data ) <= 15 then 1 else 2, ",
        "            quinzenaDoMesNoAtual = if Date.Day ( dataAtual ) <= 15 then 1 else 2, ",
        "            mesAno = Text.Proper ( Date.ToText ( data, [ Format=\"MMM/yy\", Culture =idioma ] ) ), ",
        "            quinzenaMesAno = \"Qui \" & Text.From ( quinzenaDoMesNo ) & \" - \" & mesAno, ",
        "            quinzenaIndice = 24 * ( ano - anoInicial ) + 2 * ( mes - mesInicial ) + quinzenaDoMesNo, ",
        "            quinzenaIndiceAtual = 24 *  ( anoAtual - anoInicial ) + 2 * ( mesAtual - mesInicial ) + quinzenaDoMesNoAtual, ",
        "            quinzenaOffset = quinzenaIndice - quinzenaIndiceAtual, ",
        "            semestreNo = if mes <= 6 then 1 else 2, ",
        "            semestreNoAtual = if mesAtual <= 6 then 1 else 2, ",
        "            semestreIndice = ( 2 * ( ano - anoInicial ) ) + semestreNo, ",
        "            semestreIndiceAtual = ( 2 * ( anoAtual - anoInicial ) ) + semestreNoAtual, ",
        "            semestreOffset = semestreIndice - semestreIndiceAtual, ",
        "            semestreAno = \"S\" & Text.From ( semestreNo ) & \" - \" & Text.From ( ano ), ",
        "            bimestreNo = Number.RoundUp ( mes / 2, 0 ), ",
        "            bimestreNoAtual = Number.RoundUp ( mesAtual / 2, 0 ), ",
        "            bimestreAno = \"B\" & Text.From ( bimestreNo ) & \" - \" & Text.From ( ano ), ",
        "            bimestreIndice = ( 6 * ( ano - anoInicial ) ) + bimestreNo, ",
        "            bimestreIndiceAtual = ( 6 * ( anoAtual - anoInicial ) ) + bimestreNoAtual, ",
        "            bimestreOffset = bimestreIndice - bimestreIndiceAtual, ",
        "            feriado = try feriados{[ Data = data ]}[Feriado] otherwise null, ",
        "            diaUtilNo = if feriado <> null ",
        "                or List.Contains ( ",
        "                    { 6 .. 7 }, ",
        "                    Date.DayOfWeek ( data, Day.Monday ) + 1 ",
        "                ) ",
        "                then 0 ",
        "                else 1, ",
        "            mesDiaNo = Date.Month ( data ) * 100 + Date.Day ( data ), ",
        "            estacaoAnoNo = ",
        "                if mesDiaNo >= 321 and mesDiaNo <= 620 then 1 else ",
        "                if mesDiaNo >= 621 and mesDiaNo <= 921 then 2 else ",
        "                if mesDiaNo >= 922 and mesDiaNo <= 1221 then 3 else ",
        "                4 ,",
        "            dataReferenciaFechamento = if diaMes <= diaInicioMesFechamento - 1 then data else Date.AddMonths ( data, 1 )  ",
        "",
        "        in ",
        "        //Saída das transformações ",
        "        { ",
        "            //DataIndice ",
        "            Number.From ( data - dataInicial ) + 1, ",
        "",
        "            //Data ",
        "            data, ",
        "",
        "            //DataOffset ",
        "            dataOffset, ",
        "",
        "            //DataNomeAtual ",
        "            if dataOffset = 0 then \"Data Atual\" ",
        "                else if dataOffset = -1 then \"Data Anterior\" ",
        "                else if dataOffset = 1 then \"Próxima Data\" ",
        "                else Date.ToText ( data, \"dd/MM/yyyy\" ), ",
        "",
        "            //AnoNum ",
        "            ano, ",
        "",
        "            //AnoInicio ",
        "            Date.StartOfYear ( data ), ",
        "",
        "            //AnoFim ",
        "            Date.EndOfYear ( data ), ",
        "",
        "            //AnoIndice ",
        "            ano - anoInicial + 1, ",
        "",
        "            //AnoDecrescenteNome ",
        "            ano, ",
        "",
        "            //AnoDescrescenteNum ",
        "            ano * -1, ",
        "",
        "            //AnoFiscal ",
        "            if mes >= mesInicioAnoFiscal then ano else ano - 1, ",
        "",
        "            //AnoOffset ",
        "            anoOffset, ",
        "",
        "            //AnoNomeAtual ",
        "            if anoOffset = 0 then \"Ano Atual\" ",
        "                else if anoOffset = -1 then \"Ano Anterior\" ",
        "                else if anoOffset = 1 then \"Próximo Ano\" ",
        "                else Date.ToText ( data, \"yyyy\" ),",
        "",
        "            //DiaDoMesNum ",
        "            diaMes, ",
        "",
        "            //DiaDoAnoNum ",
        "            Date.DayOfYear ( data ), ",
        "",
        "            //DiaDaSemanaNum ",
        "            diaSemana, ",
        "",
        "            //DiaDaSemanaNome ",
        "            diaSemanaNome, ",
        "",
        "            //DiaDaSemanaNomeAbrev ",
        "            Text.Start ( diaSemanaNome, 3 ), ",
        "",
        "            //DiaDaSemanaNomeIniciais ",
        "            diaSemanaIndiceZws & Text.Start ( diaSemanaNome, 1 ), ",
        "",
        "            //MesNum ",
        "            mes, ",
        "",
        "            //MesNome ",
        "            mesNome, ",
        "",
        "            //MesNomeAbrev ",
        "            Text.Start ( mesNome, 3 ), ",
        "",
        "            //MesNomeIniciais ",
        "            mesIndiceZws & Text.Start ( mesNome, 1 ), ",
        "",
        "            //MesAnoNum ",
        "            ano * 100 + mes, ",
        "",
        "            //MesAnoMome ",
        "            mesAno, ",
        "",
        "            //MesDiaNum ",
        "            mes * 100 + diaMes, ",
        "",
        "            //MesDiaNome",
        "            Text.Proper ( Date.ToText ( data, [Format=\"MMM/dd\", Culture =idioma] )), ",
        "",
        "            //MesInicio ",
        "            Date.StartOfMonth ( data ), ",
        "",
        "            //MesFim ",
        "            Date.EndOfMonth ( data ), ",
        "            ",
        "            //MesIndice ",
        "            mesAnoIndice, ",
        "            ",
        "            //MesOffset ",
        "            mesOffset, ",
        "            ",
        "            //MesNomeAtual ",
        "            if mesOffset = 0 then \"Mês Atual\" ",
        "                else if mesOffset = -1 then \"Mês Anterior\" ",
        "                else if mesOffset = 1 then \"Próximo Mês\" ",
        "                else mesNome, ",
        "",
        "            //MesNomeAbrevAtual ",
        "            if mesOffset = 0 then \"Mês Atual\" ",
        "                else if mesOffset = -1 then \"Mês Anterior\" ",
        "                else if mesOffset = 1 then \"Próximo Mês\" ",
        "                else Text.Start ( mesNome, 3 ), ",
        "            ",
        "            //MesAnoNomeAtual ",
        "            if mesOffset = 0 then \"Mês Atual\" ",
        "                else if mesOffset = -1 then \"Mês Anterior\" ",
        "                else if mesOffset = 1 then \"Próximo Mês\" ",
        "                else mesAno, ",
        "            ",
        "            //TrimestreNum ",
        "            trimestre, ",
        "",
        "            //TrimestreInicio ",
        "            Date.StartOfQuarter ( data ), ",
        "",
        "            //TrimestreFinal ",
        "            Date.EndOfQuarter ( data ), ",
        "",
        "            //TrimestreAnoNum",
        "            ano * 100 + trimestre, ",
        "",
        "            //TrimestreAnoNome ",
        "            trimestreAno, ",
        "",
        "            //TrimestreIndice ",
        "            4 * ( ano - anoInicial ) + trimestre, ",
        "",
        "            //TrimestreOffset ",
        "            trimestreOffset, ",
        "",
        "            //TrimestreAnoNomeAtual ",
        "            if trimestreOffset = 0 then \"Trimestre Atual\" ",
        "                else if trimestreOffset = -1 then \"Trimestre Anterior\" ",
        "                else if trimestreOffset = 1 then \"Próximo Trimestre\" ",
        "                else trimestreAno, ",
        "",
        "            //SemanaIsoNum ",
        "            semanaDoAnoIsoNo, ",
        "",
        "            //AnoIsoNum ",
        "            anoIso, ",
        "",
        "            //SemanaIsoAnoNum ",
        "            anoIso * 100 + semanaDoAnoIsoNo, ",
        "",
        "            //SemanaIsoAnoNome ",
        "            semanaAnoIso, ",
        "",
        "            //SemanaIsoInicio ",
        "            inicioSemanaIsoLinha, ",
        "",
        "            //SemanaIsoFim ",
        "            fimSemanaIsoLinha, ",
        "",
        "            //SemanaIsoIndice ",
        "            Number.From ( inicioSemanaIsoLinha - inicioSemanaIsoInicial ) / 7 + 1, ",
        "",
        "            //SemanaIsoOffset ",
        "            semanaOffset, ",
        "",
        "            //SemanaIsoAnoNomeAtual ",
        "            if semanaIsoOffset = 0 then \"Semana Atual\" ",
        "                else if semanaIsoOffset = -1 then \"Semana Anterior\" ",
        "                else if semanaIsoOffset = 1 then \"Próxima Semana\" ",
        "                else semanaAnoIso, ",
        "",
        "            //SemanaNo ",
        "            semanaDoAnoNum, ",
        "",
        "            //SemanaAnoNum ",
        "            ano * 100 + semanaDoAnoNum, ",
        "",
        "            //SemanaAnoNome ",
        "            semanaAno, ",
        "",
        "            //SemanaInicio ",
        "            inicioSemanaLinha, ",
        "",
        "            //SemanaFim ",
        "            fimSemanaLinha, ",
        "",
        "            //SemanaPeriodo",
        "            Date.ToText ( inicioSemanaLinha, \"dd/MM/yyyy\" ) & \" a \" & Date.ToText ( fimSemanaLinha, \"dd/MM/yyyy\" ),",
        "",
        "            //SemanaIndice ",
        "            Number.From ( inicioSemanaLinha - inicioSemanaInicial ) / 7 + 1, ",
        "",
        "            //SemanaOffset",
        "            semanaOffset, ",
        "",
        "            //SemanaAnoNomeAtual ",
        "            if semanaOffset = 0 then \"Semana Atual\" ",
        "                else if semanaOffset = -1 then \"Semana Anterior\" ",
        "                else if semanaOffset = 1 then \"Próxima Semana\" ",
        "                else semanaAno, ",
        "",
        "            //SemanaDoMesNum ",
        "            semanaDoMes, ",
        "",
        "            //AnoSemanalNum ",
        "            anoSemanal, ",
        "",
        "            //MesSemanalNum ",
        "            mesSemanal, ",
        "",
        "            //MesSemanalNome ",
        "            mesSemanalNome, ",
        "",
        "            //MesSemanalNomeAbrev ",
        "            mesSemanalNomeAbrev, ",
        "",
        "            //MesAnoSemanalNum ",
        "            anoSemanal * 100 + mesSemanal, ",
        "",
        "            //MesAnoSemanalNome ",
        "            Text.Proper ( Date.ToText ( inicioSemanaLinha, [ Format=\"MMM/yy\", Culture=idioma ] )), ",
        "",
        "            //SemanaDoMesPadraoNum",
        "            semanaDoMesPadraoNum,",
        "",
        "            //SemanaDoMesAnoPadraoNome",
        "            mesAno & \" \" & Text.From ( semanaDoMesPadraoNum ),",
        "",
        "            //SemanaDoMesAnoPadraoNum",
        "            ano * 10000 + mes * 100 + semanaDoMesPadraoNum,",
        "",
        "            //QuinzenaDoMesNum ",
        "            quinzenaDoMesNo, ",
        "",
        "            //QuinzenaMesNum ",
        "            mes * 10 + quinzenaDoMesNo, ",
        "",
        "            //QuinzenaMesNome ",
        "            \"Qui \" & Text.From ( quinzenaDoMesNo ) & \" - \" & mesNome, ",
        "            ",
        "            //QuinzenaMesAnoNum ",
        "            ano * 10000 + mes * 100 + quinzenaDoMesNo, ",
        "",
        "            //QuinzenaMesAnoNome ",
        "            quinzenaMesAno, ",
        "",
        "            //QuinzenaPeriodo",
        "            let ",
        "                inicioQuinzena = if quinzenaDoMesNo = 1 then inicioMes else Date.AddDays ( inicioMes, 15  ),",
        "                fimQuinzena = if quinzenaDoMesNo = 2 then fimMes else Date.AddDays ( inicioMes, 14 )",
        "            in",
        "                Date.ToText ( inicioQuinzena, \"dd/MM/yyyy\" ) & \" a \" & Date.ToText ( fimQuinzena, \"dd/MM/yyyy\" ),",
        "",
        "            //QuinzenaIndice",
        "            quinzenaIndice,",
        "",
        "            //QuinzenaOffset ",
        "            quinzenaOffset, ",
        "",
        "            //QuinzenaMesAnoNomeAtual ",
        "            if quinzenaOffset = 0 then \"Quinzena Atual\" ",
        "                else if quinzenaOffset = -1 then \"Quinzena Anterior\" ",
        "                else if quinzenaOffset = 1 then \"Próxima Quinzena\" ",
        "                else quinzenaMesAno, ",
        "",
        "            //SemestreDoAnoNum ",
        "            semestreNo, ",
        "",
        "            //SemestreAnoNum ",
        "            ano * 100 + semestreNo, ",
        "",
        "            //SemestreAnoNome",
        "            \"S\" & Text.From ( semestreNo ) & \" - \" & Text.From ( ano ), ",
        "",
        "            //SemestreIndice ",
        "            semestreIndice, ",
        "",
        "            //Semestre Offset ",
        "            semestreOffset, ",
        "",
        "            //SemestreAnoNomeAtual ",
        "            if semestreOffset = 0 then \"Semestre Atual\" ",
        "                else if semestreOffset = -1 then \"Semestre Anterior\" ",
        "                else if semestreOffset = 1 then \"Próximo Semestre\" ",
        "                else semestreAno, ",
        "            ",
        "            //BimestreDoAnoNum ",
        "            bimestreNo, ",
        "",
        "            //BimestreAnoNum ",
        "            ano * 100 + bimestreNo, ",
        "",
        "            //BimestreAnoNome ",
        "            bimestreAno, ",
        "",
        "            //BimestreIndice ",
        "            bimestreIndice, ",
        "",
        "            //BimestrOffset ",
        "            bimestreOffset, ",
        "",
        "            //BimestreAnoNomeAtual ",
        "            if bimestreOffset = 0 then \"Bimestre Atual\" ",
        "                else if bimestreOffset = -1 then \"Bimestre Anterior\" ",
        "                else if bimestreOffset = 1 then \"Próximo Bimestre\" ",
        "                else bimestreAno, ",
        "",
        "            //FeriadoNome ",
        "            feriado, ",
        "",
        "            //DiaUtilNum ",
        "            diaUtilNo, ",
        "",
        "            //DiaUtilNome ",
        "            if diaUtilNo = 0 then \"Dia Não Útil\" else \"Dia Útil\", ",
        "            ",
        "            //EstacaoAnoNum ",
        "            estacaoAnoNo, ",
        "",
        "            //EstacaoAnoNome ",
        "            if estacaoAnoNo = 1 then \"Outono\" ",
        "                else if estacaoAnoNo = 2 then \"Inverno\" ",
        "                else if estacaoAnoNo = 3 then \"Primavera\" ",
        "                else \"Verão\",",
        "",
        "            //MesFechamentoNum",
        "            Date.Month ( dataReferenciaFechamento ),",
        "",
        "            //MesFechamentoNome",
        "            Text.Proper ( Date.ToText ( dataReferenciaFechamento, [ Format = \"MMMM\", Culture = idioma ] ) ),",
        "",
        "            //MesFechamentoNomeAbrev",
        "            Text.Proper ( Date.ToText ( dataReferenciaFechamento, [ Format = \"MMM\", Culture = idioma ] ) ),",
        "",
        "            //AnoFechamentoNum",
        "            Date.Year ( dataReferenciaFechamento ),",
        "",
        "            //MesAnoFechamentoNum",
        "            Date.Year ( dataReferenciaFechamento ) * 100 + Date.Month ( dataReferenciaFechamento ),",
        "",
        "            //MesAnoFechamentoNome",
        "            Text.Proper ( Date.ToText ( dataReferenciaFechamento, [ Format = \"MMM/yy\", Culture = idioma ] ) ),",
        "",
        "            //DataFutura",
        "            dataOffset > 0",
        "",
        "        }, ",
        "",
        "    //Gera a tabela calendário ",
        "    calendario = #table ( ",
        "",
        "        //Nomes e tipos das colunas ",
        "        type table [ ",
        "            DataIndice = Int64.Type, ",
        "            Data = date, ",
        "            DataOffset = Int64.Type, ",
        "            DataNomeAtual = text, ",
        "            AnoNum = Int64.Type, ",
        "            AnoInicio = date, ",
        "            AnoFim = date, ",
        "            AnoIndice = Int64.Type, ",
        "            AnoDecrescenteNome = Int64.Type, ",
        "            AnoDecrescenteNum = Int64.Type, ",
        "            AnoFiscal = Int64.Type, ",
        "            AnoOffset = Int64.Type, ",
        "            AnoNomeAtual = text, ",
        "            DiaDoMesNum = Int64.Type, ",
        "            DiaDoAnoNum = Int64.Type, ",
        "            DiaDaSemanaNum = Int64.Type, ",
        "            DiaDaSemanaNome = text, ",
        "            DiaDaSemanaNomeAbrev = text, ",
        "            DiaDaSemanaNomeIniciais = text,",
        "            MesNum = Int64.Type, ",
        "            MesNome = text, ",
        "            MesNomeAbrev = text, ",
        "            MesNomeIniciais = text, ",
        "            MesAnoNum = Int64.Type, ",
        "            MesAnoNome = text, ",
        "            MesDiaNum = Int64.Type, ",
        "            MesDiaNome = text, ",
        "            MesInicio = date, ",
        "            MesFim = date, ",
        "            MesIndice = Int64.Type, ",
        "            MesOffset = Int64.Type, ",
        "            MesNomeAtual = text, ",
        "            MesNomeAbrevAtual = text, ",
        "            MesAnoNomeAtual = text, ",
        "            TrimestreNum = Int64.Type, ",
        "            TrimestreInicio = date, ",
        "            TrimestreFim = date, ",
        "            TrimestreAnoNum = Int64.Type,",
        "            TrimestreAnoNome = text, ",
        "            TrimestreIndice = Int64.Type, ",
        "            TrimestreOffset = Int64.Type, ",
        "            TrimestreAnoNomeAtual = text, ",
        "            SemanaIsoNum = Int64.Type,",
        "            AnoIsoNum = Int64.Type, ",
        "            SemanaIsoAnoNum = Int64.Type, ",
        "            SemanaIsoAnoNome = text, ",
        "            SemanaIsoInicio = date, ",
        "            SemanaIsoFim = date, ",
        "            SemanaIsoIndice = Int64.Type, ",
        "            SemanaIsoOffset = Int64.Type, ",
        "            SemanaIsoAnoNomeAtual = text, ",
        "            SemanaNum = Int64.Type, ",
        "            SemanaAnoNum = Int64.Type, ",
        "            SemanaAnoNome = text, ",
        "            SemanaInicio = date, ",
        "            SemanaFim = date, ",
        "            SemanaPeriodo = text,",
        "            SemanaIndice = Int64.Type, ",
        "            SemanaOffset = Int64.Type, ",
        "            SemanaAnoNomeAtual = text, ",
        "            SemanaDoMesNum = Int64.Type, ",
        "            AnoSemanalNum = Int64.Type, ",
        "            MesSemanalNum = Int64.Type, ",
        "            MesSemanalNome = text, ",
        "            MesSemanalNomeAbrev = text, ",
        "            MesAnoSemanalNum = Int64.Type, ",
        "            MesAnoSemanalNome = text, ",
        "            SemanaDoMesPadraoNum = Int64.Type,",
        "            SemanaDoMesAnoPadraoNome = text, ",
        "            SemanaDoMesAnoPadraoNum = Int64.Type, ",
        "            QuinzenaDoMesNum = Int64.Type,",
        "            QuinzenaMesNum = Int64.Type, ",
        "            QuinzenaMesNome = text, ",
        "            QuinzenaMesAnoNum = Int64.Type, ",
        "            QuinzenaMesAnoNome = text, ",
        "            QuinzenaPeriodo = text,",
        "            QuinzenaIndice = Int64.Type, ",
        "            QuinzenaOffset = Int64.Type, ",
        "            QuinzenaMesAnoNomeAtual = text, ",
        "            SemestreDoAnoNum = Int64.Type, ",
        "            SemestreAnoNum = Int64.Type, ",
        "            SemestreAnoNome = text, ",
        "            SemestreIndice = Int64.Type, ",
        "            SemestreOffset = Int64.Type, ",
        "            SemestreAnoNomeAtual = text,",
        "            BimestreDoAnoNum = Int64.Type, ",
        "            BimestreAnoNum = Int64.Type, ",
        "            BimestreAnoNome = text, ",
        "            BimestreIndice = Int64.Type, ",
        "            BimestreOffset = Int64.Type, ",
        "            BimestreAnoNomeAtual = text, ",
        "            FeriadoNome = text, ",
        "            DiaUtilNum = Int64.Type, ",
        "            DiaUtilNome = text, ",
        "            EstacaoAnoNum = Int64.Type, ",
        "            EstacaoAnoNome = text, ",
        "            MesFechamentoNum = Int64.Type,",
        "            MesFechamentoNome = text, ",
        "            MesFechamentoNomeAbrev = text, ",
        "            AnoFechamentoNum = Int64.Type,",
        "            MesAnoFechamentoNum = Int64.Type,",
        "            MesAnoFechamentoNome = text,",
        "            DataFutura = Logical.Type ",
        "        ], ",
        "",
        "        //Invoca função de transformação ",
        "        List.Transform ( datasRange, fxLinhaCalendario ) ",
        "    ),",
        "    ",
        "    // Adiciona o número do dia útil do mês",
        "    adDiaUtilMes = ",
        "    let",
        "        tabela = Table.Buffer ( ",
        "            Table.SelectColumns ( ",
        "                calendario, ",
        "                { \"DiaDoMesNum\", \"MesIndice\", \"DiaUtilNum\" } ",
        "            ) ",
        "        ), ",
        "",
        "        addDiaUtilMes = Table.AddColumn (",
        "            tabela, ",
        "            \"DiaUtilDoMes\", ",
        "            each let ",
        "                __mesIndice = [MesIndice], ",
        "                __DiaDoMes = [DiaDoMesNum] ",
        "            in ",
        "                List.Sum ( ",
        "                    Table.SelectRows ( ",
        "                        tabela, ",
        "                        each [MesIndice] = __mesIndice  ",
        "                            and [DiaDoMesNum] <= __DiaDoMes ",
        "                    )",
        "                    [DiaUtilNum]",
        "                ), ",
        "            Int64.Type",
        "        )[ [MesIndice], [DiaDoMesNum], [DiaUtilDoMes] ], ",
        "",
        "        join = Table.Join (",
        "            calendario, { \"MesIndice\", \"DiaDoMesNum\" },",
        "            addDiaUtilMes, { \"MesIndice\", \"DiaDoMesNum\" }",
        "        ) ",
        "    in",
        "        join ",
        "            ",
        "in",
        "    adDiaUtilMes",
        "in",
        "    dCalendario",
        "// in dataInicial"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let \\n    //Especifique a data inicial e final do projeto\\n    menor_ano_entre_tabelas = Date.Year(\\n        Date.From(\\n            List.Min(                               // colocar aqui a lista de tabelas a analisar (somente tabelas fato)\\n                f_viagens[Cadastro da viagem]\\n            )\\n        )\\n    ),\\n    maior_data_entre_tabelas = Date.From(\\n        List.Max(                                   // colocar aqui a lista de tabelas a analisar (somente tabelas fato)\\n            f_viagens[Cadastro da viagem] \\n        )\\n    ),\\n    dataInicial = #date ( menor_ano_entre_tabelas, 1, 1 ), \\n    dataFinal = Date.EndOfYear ( Date.From ( maior_data_entre_tabelas ) ), \\n    \\n\\n\\n\\n    //Especifique a data atual. Padrão: Data atual do servidor \\n    dataAtual = Date.From ( DateTime.LocalNow ( ) ), \\n\\n    //Especifique o início da semana. Padrão: Day.Monday (Segunda-feira) \\n    inicioSemana = Day.Monday, \\n\\n    //Especifique o mês do início do ano fiscal. Padrão: 4 (Abril)\\n    mesInicioAnoFiscal = 4, \\n\\n    /*Dia de início do mês de fechamento. \\n        Padrão: 16 (siginifica que o mês de fechamento vai de 16 do mês corrente \\n        até o dia 15 do próximo mês */\\n    diaInicioMesFechamento = 16, \\n\\n    //Especifique o idioma. Padrão: pt-BR (Português do Brasil)\\n    idioma = \\\"pt-BR\\\", \\n\\n    //Geração da tabela\\n    dCalendario = let\\n\\n    //Lista com todas as datas \\n    datasRange = List.Buffer ( \\n        List.Transform ( \\n            { Number.From ( dataInicial ) .. Number.From ( dataFinal ) }, \\n            Date.From \\n        ) \\n    ), \\n\\n    //Lista com todos os anos \\n    anosRange = List.Buffer ( \\n        { Date.Year ( dataInicial ) .. Date.Year ( dataFinal )} \\n    ), \\n\\n    //Feriados fixos que ocorrem em todos os anos \\n    feriadosFixosCadastro = #table ( \\n        type table [ \\n            Dia = Int64.Type, \\n            Mes = Int64.Type, \\n            Feriado = text \\n        ],\\n        {\\n          // Dia, Mês, Feriado\\n                 { 01, 01, \\\"Confraternização Universal\\\"   }\\n            // , { 25, 01, \\\"Aniversário da Cidade\\\"        } \\n               , { 21, 04, \\\"Tiradentes\\\"                   } \\n               , { 01, 05, \\\"Dia do Trabalhador\\\"           } \\n            // , { 09, 07, \\\"Revolução Constitucionalista\\\" } \\n               , { 07, 09, \\\"Independência do Brasil\\\"      } \\n               , { 12, 10, \\\"N. Srª Aparecida\\\"             } \\n               , { 02, 11, \\\"Finados\\\"                      } \\n               , { 15, 11, \\\"Proclamação da República\\\"     } \\n            // , { 20, 11, \\\"Consciência Negra\\\"            } \\n            // , { 24, 12, \\\"Véspera de Natal\\\"             } \\n               , { 25, 12, \\\"Natal\\\"                        } \\n            // , { 31, 12, \\\"Véspera de Ano Novo\\\"          } \\n        } \\n    ), \\n\\n    //Função que gera os feriados fixos para todos os anos \\n    fxGeraFeriadosFixos = ( ano ) => \\n        Table.AddColumn ( \\n            feriadosFixosCadastro, \\n            \\\"Data\\\", \\n            each #date ( ano, [Mes], [Dia] ), \\n            type date \\n        ) \\n        [ [Data], [Feriado] ], \\n\\n    //Gera a tabela de feriados fixos \\n    feriadosFixos = Table.Combine ( \\n        List.Transform ( \\n            anosRange, \\n            fxGeraFeriadosFixos \\n        ) \\n    ), \\n\\n    //Função que gera os feriados móveis \\n    fxGeraFeriadosMoveis = ( ano ) => \\n        let \\n            modExcel =  ( x, y ) => let m = Number.Mod ( x, y ) in if  m < 0 then m + y else m, \\n            pascoa =  Date.From ( \\n                Number.Round ( \\n                    Number.From ( #date ( ano, 4, 1 ) ) / 7 \\n                    +  modExcel ( 19 * modExcel ( ano, 19 ) - 7, 30 ) * 0.14, \\n                    0, \\n                    RoundingMode.Up \\n                ) \\n                * 7 - 6 \\n            ), \\n            feriadosMoveis =  #table ( \\n                type table [ \\n                    Data = date, \\n                    Feriado = text \\n                ], \\n                { \\n                    \\n                         { Date.AddDays(pascoa, -2  ), \\\"Sexta-Feira Santa\\\"          } \\n                       , { pascoa                    , \\\"Páscoa\\\"                     }\\n                       , { Date.AddDays(pascoa, 60  ), \\\"Corpus Christi\\\"             }\\n                    // , { Date.AddDays(pascoa, -48 ), \\\"Segunda-feira de Carnaval\\\"  }\\n                    // , { Date.AddDays(pascoa, -47 ), \\\"Terça-feira de Carnaval\\\"    }\\n                    // , { Date.AddDays(pascoa, -46 ), \\\"Quarta-feira de Cinzas\\\"     }\\n                } \\n            ) \\n        in \\n            feriadosMoveis, \\n\\n    //Gera a tabela de feriados móveis \\n    feriadosMoveis = Table.Combine ( \\n        List.Transform ( \\n            anosRange, \\n            fxGeraFeriadosMoveis \\n        ) \\n    ),  \\n\\n    //Tabela contendo todos os feriados \\n    feriados = Table.Combine ( \\n        { feriadosFixos, feriadosMoveis } \\n    ), \\n\\n    //Define a função de transformação de cada data \\n    fxLinhaCalendario = ( data ) => \\n        let \\n        //Transformações de simples passada para reutilização\\n            zws = Character.FromNumber ( 8203 ), //Caracter invisível (zero-width spacing )\\n            dataOffset = Number.From ( data - dataAtual ), \\n            ano = Date.Year ( data ), \\n            mes = Date.Month ( data ), \\n            trimestre = Date.QuarterOfYear ( data ), \\n            anoInicial = Date.Year ( dataInicial ), \\n            anoAtual = Date.Year ( dataAtual ), \\n            anoFinal = Date.Year ( dataFinal ), \\n            anoOffset = ano - anoAtual, \\n            mesInicial = Date.Month ( dataInicial ), \\n            mesAtual = Date.Month ( dataAtual ), \\n            trimestreInicial = Date.QuarterOfYear ( dataInicial ), \\n            trimestreAtual = Date.QuarterOfYear ( dataAtual ), \\n            diaSemana = Date.DayOfWeek ( data, inicioSemana ) + 1, \\n            diaSemanaIndiceZws = Text.Repeat ( zws, 7 - diaSemana ), \\n            semanaDoAnoIsoNo = \\n                let \\n                    quintaNaSemana = Date.AddDays ( data, 3 - Date.DayOfWeek ( data, Day.Monday ) ), \\n                    inicioAnoQuintaNaSemana = #date ( Date.Year ( quintaNaSemana ), 1, 1 ), \\n                    difDias = Duration.Days ( quintaNaSemana - inicioAnoQuintaNaSemana ) \\n                in \\n                    Number.IntegerDivide ( difDias, 7, 0 ) + 1, \\n            semanaDoAnoNum = Date.WeekOfYear ( data, inicioSemana ), \\n            diaSemanaNome = Text.Proper ( Date.DayOfWeekName ( data, idioma ) ), \\n            mesNome = Text.Proper ( Date.MonthName ( data, idioma ) ), \\n            mesIndiceZws = Text.Repeat ( zws, 12 - mes ), \\n            mesAnoIndice = 12 * ( ano - anoInicial ) + mes, \\n            inicioMes = Date.StartOfMonth ( data ),\\n            fimMes = Date.EndOfMonth ( data ),\\n            diaMes = Date.Day ( data ), \\n            mesOffset =  ( ( ano * 12 ) - 1 + mes ) - ( ( anoAtual * 12 ) - 1 + mesAtual ), \\n            trimestreOffset = ( ( ano * 4 ) - 1 + trimestre ) - ( ( anoAtual * 4 ) - 1 + trimestreAtual ), \\n            trimestreAno = \\\"T\\\" & Text.From ( trimestre ) & \\\"/\\\" & Text.From ( ano ), \\n            anoIso = Date.Year ( Date.AddDays ( data, 26 - semanaDoAnoIsoNo ) ), \\n            inicioSemanaIsoLinha = Date.StartOfWeek ( data, Day.Monday ), \\n            fimSemanaIsoLinha = Date.EndOfWeek ( data, Day.Monday ), \\n            inicioSemanaLinha = Date.StartOfWeek ( data, inicioSemana ), \\n            fimSemanaLinha = Date.EndOfWeek ( data, inicioSemana ), \\n            inicioSemanaIsoInicial = Date.StartOfWeek ( data, Day.Monday ), \\n            inicioSemanaInicial = Date.StartOfWeek ( dataInicial, inicioSemana ), \\n            inicioSemanaIsoAtual = Date.StartOfWeek ( dataAtual, Day.Monday ),\\n            inicioSemanaAtual = Date.StartOfWeek ( dataAtual, inicioSemana ), \\n            semanaIsoOffset = Number.From ( inicioSemanaIsoLinha - inicioSemanaIsoAtual ) / 7,\\n            semanaOffset = Number.From ( inicioSemanaLinha - inicioSemanaAtual ) / 7, \\n            semanaAnoIso = \\\"S\\\" & Text.PadStart ( Text.From ( semanaDoAnoIsoNo ), 2, \\\"0\\\" ) & \\\"/\\\" & Text.From ( anoIso ), \\n            semanaAno = \\\"S\\\" & Text.PadStart ( Text.From ( semanaDoAnoNum ), 2, \\\"0\\\" ) & \\\"/\\\" & Text.From ( ano ), \\n            semanaDoMes = \\n                let \\n                    inicioMes = Date.StartOfMonth ( Date.StartOfWeek ( data,inicioSemana ) ), \\n                    primeirosSeteDias = List.Dates ( inicioMes, 7, #duration ( 1, 0, 0, 0 ) ), \\n                    primeiroDia = List.Select ( primeirosSeteDias, each Date.DayOfWeek ( _, inicioSemana ) = 0 ) { 0 } \\n                in \\n                    Number.RoundUp ( Duration.Days ( data-primeiroDia ) / 7 + 0.05 ), \\n            anoSemanal = Date.Year ( inicioSemanaLinha ), \\n            mesSemanal = Date.Month ( inicioSemanaLinha ) , \\n            mesSemanalNome = Text.Proper ( Date.MonthName ( inicioSemanaLinha, idioma ) ), \\n            mesSemanalNomeAbrev = Text.Start ( mesSemanalNome, 3 ), \\n            semanaDoMesPadraoNum = Date.WeekOfMonth ( data, inicioSemana ), \\n            quinzenaDoMesNo = if Date.Day ( data ) <= 15 then 1 else 2, \\n            quinzenaDoMesNoAtual = if Date.Day ( dataAtual ) <= 15 then 1 else 2, \\n            mesAno = Text.Proper ( Date.ToText ( data, [ Format=\\\"MMM/yy\\\", Culture =idioma ] ) ), \\n            quinzenaMesAno = \\\"Qui \\\" & Text.From ( quinzenaDoMesNo ) & \\\" - \\\" & mesAno, \\n            quinzenaIndice = 24 * ( ano - anoInicial ) + 2 * ( mes - mesInicial ) + quinzenaDoMesNo, \\n            quinzenaIndiceAtual = 24 *  ( anoAtual - anoInicial ) + 2 * ( mesAtual - mesInicial ) + quinzenaDoMesNoAtual, \\n            quinzenaOffset = quinzenaIndice - quinzenaIndiceAtual, \\n            semestreNo = if mes <= 6 then 1 else 2, \\n            semestreNoAtual = if mesAtual <= 6 then 1 else 2, \\n            semestreIndice = ( 2 * ( ano - anoInicial ) ) + semestreNo, \\n            semestreIndiceAtual = ( 2 * ( anoAtual - anoInicial ) ) + semestreNoAtual, \\n            semestreOffset = semestreIndice - semestreIndiceAtual, \\n            semestreAno = \\\"S\\\" & Text.From ( semestreNo ) & \\\" - \\\" & Text.From ( ano ), \\n            bimestreNo = Number.RoundUp ( mes / 2, 0 ), \\n            bimestreNoAtual = Number.RoundUp ( mesAtual / 2, 0 ), \\n            bimestreAno = \\\"B\\\" & Text.From ( bimestreNo ) & \\\" - \\\" & Text.From ( ano ), \\n            bimestreIndice = ( 6 * ( ano - anoInicial ) ) + bimestreNo, \\n            bimestreIndiceAtual = ( 6 * ( anoAtual - anoInicial ) ) + bimestreNoAtual, \\n            bimestreOffset = bimestreIndice - bimestreIndiceAtual, \\n            feriado = try feriados{[ Data = data ]}[Feriado] otherwise null, \\n            diaUtilNo = if feriado <> null \\n                or List.Contains ( \\n                    { 6 .. 7 }, \\n                    Date.DayOfWeek ( data, Day.Monday ) + 1 \\n                ) \\n                then 0 \\n                else 1, \\n            mesDiaNo = Date.Month ( data ) * 100 + Date.Day ( data ), \\n            estacaoAnoNo = \\n                if mesDiaNo >= 321 and mesDiaNo <= 620 then 1 else \\n                if mesDiaNo >= 621 and mesDiaNo <= 921 then 2 else \\n                if mesDiaNo >= 922 and mesDiaNo <= 1221 then 3 else \\n                4 ,\\n            dataReferenciaFechamento = if diaMes <= diaInicioMesFechamento - 1 then data else Date.AddMonths ( data, 1 )  \\n\\n        in \\n        //Saída das transformações \\n        { \\n            //DataIndice \\n            Number.From ( data - dataInicial ) + 1, \\n\\n            //Data \\n            data, \\n\\n            //DataOffset \\n            dataOffset, \\n\\n            //DataNomeAtual \\n            if dataOffset = 0 then \\\"Data Atual\\\" \\n                else if dataOffset = -1 then \\\"Data Anterior\\\" \\n                else if dataOffset = 1 then \\\"Próxima Data\\\" \\n                else Date.ToText ( data, \\\"dd/MM/yyyy\\\" ), \\n\\n            //AnoNum \\n            ano, \\n\\n            //AnoInicio \\n            Date.StartOfYear ( data ), \\n\\n            //AnoFim \\n            Date.EndOfYear ( data ), \\n\\n            //AnoIndice \\n            ano - anoInicial + 1, \\n\\n            //AnoDecrescenteNome \\n            ano, \\n\\n            //AnoDescrescenteNum \\n            ano * -1, \\n\\n            //AnoFiscal \\n            if mes >= mesInicioAnoFiscal then ano else ano - 1, \\n\\n            //AnoOffset \\n            anoOffset, \\n\\n            //AnoNomeAtual \\n            if anoOffset = 0 then \\\"Ano Atual\\\" \\n                else if anoOffset = -1 then \\\"Ano Anterior\\\" \\n                else if anoOffset = 1 then \\\"Próximo Ano\\\" \\n                else Date.ToText ( data, \\\"yyyy\\\" ),\\n\\n            //DiaDoMesNum \\n            diaMes, \\n\\n            //DiaDoAnoNum \\n            Date.DayOfYear ( data ), \\n\\n            //DiaDaSemanaNum \\n            diaSemana, \\n\\n            //DiaDaSemanaNome \\n            diaSemanaNome, \\n\\n            //DiaDaSemanaNomeAbrev \\n            Text.Start ( diaSemanaNome, 3 ), \\n\\n            //DiaDaSemanaNomeIniciais \\n            diaSemanaIndiceZws & Text.Start ( diaSemanaNome, 1 ), \\n\\n            //MesNum \\n            mes, \\n\\n            //MesNome \\n            mesNome, \\n\\n            //MesNomeAbrev \\n            Text.Start ( mesNome, 3 ), \\n\\n            //MesNomeIniciais \\n            mesIndiceZws & Text.Start ( mesNome, 1 ), \\n\\n            //MesAnoNum \\n            ano * 100 + mes, \\n\\n            //MesAnoMome \\n            mesAno, \\n\\n            //MesDiaNum \\n            mes * 100 + diaMes, \\n\\n            //MesDiaNome\\n            Text.Proper ( Date.ToText ( data, [Format=\\\"MMM/dd\\\", Culture =idioma] )), \\n\\n            //MesInicio \\n            Date.StartOfMonth ( data ), \\n\\n            //MesFim \\n            Date.EndOfMonth ( data ), \\n            \\n            //MesIndice \\n            mesAnoIndice, \\n            \\n            //MesOffset \\n            mesOffset, \\n            \\n            //MesNomeAtual \\n            if mesOffset = 0 then \\\"Mês Atual\\\" \\n                else if mesOffset = -1 then \\\"Mês Anterior\\\" \\n                else if mesOffset = 1 then \\\"Próximo Mês\\\" \\n                else mesNome, \\n\\n            //MesNomeAbrevAtual \\n            if mesOffset = 0 then \\\"Mês Atual\\\" \\n                else if mesOffset = -1 then \\\"Mês Anterior\\\" \\n                else if mesOffset = 1 then \\\"Próximo Mês\\\" \\n                else Text.Start ( mesNome, 3 ), \\n            \\n            //MesAnoNomeAtual \\n            if mesOffset = 0 then \\\"Mês Atual\\\" \\n                else if mesOffset = -1 then \\\"Mês Anterior\\\" \\n                else if mesOffset = 1 then \\\"Próximo Mês\\\" \\n                else mesAno, \\n            \\n            //TrimestreNum \\n            trimestre, \\n\\n            //TrimestreInicio \\n            Date.StartOfQuarter ( data ), \\n\\n            //TrimestreFinal \\n            Date.EndOfQuarter ( data ), \\n\\n            //TrimestreAnoNum\\n            ano * 100 + trimestre, \\n\\n            //TrimestreAnoNome \\n            trimestreAno, \\n\\n            //TrimestreIndice \\n            4 * ( ano - anoInicial ) + trimestre, \\n\\n            //TrimestreOffset \\n            trimestreOffset, \\n\\n            //TrimestreAnoNomeAtual \\n            if trimestreOffset = 0 then \\\"Trimestre Atual\\\" \\n                else if trimestreOffset = -1 then \\\"Trimestre Anterior\\\" \\n                else if trimestreOffset = 1 then \\\"Próximo Trimestre\\\" \\n                else trimestreAno, \\n\\n            //SemanaIsoNum \\n            semanaDoAnoIsoNo, \\n\\n            //AnoIsoNum \\n            anoIso, \\n\\n            //SemanaIsoAnoNum \\n            anoIso * 100 + semanaDoAnoIsoNo, \\n\\n            //SemanaIsoAnoNome \\n            semanaAnoIso, \\n\\n            //SemanaIsoInicio \\n            inicioSemanaIsoLinha, \\n\\n            //SemanaIsoFim \\n            fimSemanaIsoLinha, \\n\\n            //SemanaIsoIndice \\n            Number.From ( inicioSemanaIsoLinha - inicioSemanaIsoInicial ) / 7 + 1, \\n\\n            //SemanaIsoOffset \\n            semanaOffset, \\n\\n            //SemanaIsoAnoNomeAtual \\n            if semanaIsoOffset = 0 then \\\"Semana Atual\\\" \\n                else if semanaIsoOffset = -1 then \\\"Semana Anterior\\\" \\n                else if semanaIsoOffset = 1 then \\\"Próxima Semana\\\" \\n                else semanaAnoIso, \\n\\n            //SemanaNo \\n            semanaDoAnoNum, \\n\\n            //SemanaAnoNum \\n            ano * 100 + semanaDoAnoNum, \\n\\n            //SemanaAnoNome \\n            semanaAno, \\n\\n            //SemanaInicio \\n            inicioSemanaLinha, \\n\\n            //SemanaFim \\n            fimSemanaLinha, \\n\\n            //SemanaPeriodo\\n            Date.ToText ( inicioSemanaLinha, \\\"dd/MM/yyyy\\\" ) & \\\" a \\\" & Date.ToText ( fimSemanaLinha, \\\"dd/MM/yyyy\\\" ),\\n\\n            //SemanaIndice \\n            Number.From ( inicioSemanaLinha - inicioSemanaInicial ) / 7 + 1, \\n\\n            //SemanaOffset\\n            semanaOffset, \\n\\n            //SemanaAnoNomeAtual \\n            if semanaOffset = 0 then \\\"Semana Atual\\\" \\n                else if semanaOffset = -1 then \\\"Semana Anterior\\\" \\n                else if semanaOffset = 1 then \\\"Próxima Semana\\\" \\n                else semanaAno, \\n\\n            //SemanaDoMesNum \\n            semanaDoMes, \\n\\n            //AnoSemanalNum \\n            anoSemanal, \\n\\n            //MesSemanalNum \\n            mesSemanal, \\n\\n            //MesSemanalNome \\n            mesSemanalNome, \\n\\n            //MesSemanalNomeAbrev \\n            mesSemanalNomeAbrev, \\n\\n            //MesAnoSemanalNum \\n            anoSemanal * 100 + mesSemanal, \\n\\n            //MesAnoSemanalNome \\n            Text.Proper ( Date.ToText ( inicioSemanaLinha, [ Format=\\\"MMM/yy\\\", Culture=idioma ] )), \\n\\n            //SemanaDoMesPadraoNum\\n            semanaDoMesPadraoNum,\\n\\n            //SemanaDoMesAnoPadraoNome\\n            mesAno & \\\" \\\" & Text.From ( semanaDoMesPadraoNum ),\\n\\n            //SemanaDoMesAnoPadraoNum\\n            ano * 10000 + mes * 100 + semanaDoMesPadraoNum,\\n\\n            //QuinzenaDoMesNum \\n            quinzenaDoMesNo, \\n\\n            //QuinzenaMesNum \\n            mes * 10 + quinzenaDoMesNo, \\n\\n            //QuinzenaMesNome \\n            \\\"Qui \\\" & Text.From ( quinzenaDoMesNo ) & \\\" - \\\" & mesNome, \\n            \\n            //QuinzenaMesAnoNum \\n            ano * 10000 + mes * 100 + quinzenaDoMesNo, \\n\\n            //QuinzenaMesAnoNome \\n            quinzenaMesAno, \\n\\n            //QuinzenaPeriodo\\n            let \\n                inicioQuinzena = if quinzenaDoMesNo = 1 then inicioMes else Date.AddDays ( inicioMes, 15  ),\\n                fimQuinzena = if quinzenaDoMesNo = 2 then fimMes else Date.AddDays ( inicioMes, 14 )\\n            in\\n                Date.ToText ( inicioQuinzena, \\\"dd/MM/yyyy\\\" ) & \\\" a \\\" & Date.ToText ( fimQuinzena, \\\"dd/MM/yyyy\\\" ),\\n\\n            //QuinzenaIndice\\n            quinzenaIndice,\\n\\n            //QuinzenaOffset \\n            quinzenaOffset, \\n\\n            //QuinzenaMesAnoNomeAtual \\n            if quinzenaOffset = 0 then \\\"Quinzena Atual\\\" \\n                else if quinzenaOffset = -1 then \\\"Quinzena Anterior\\\" \\n                else if quinzenaOffset = 1 then \\\"Próxima Quinzena\\\" \\n                else quinzenaMesAno, \\n\\n            //SemestreDoAnoNum \\n            semestreNo, \\n\\n            //SemestreAnoNum \\n            ano * 100 + semestreNo, \\n\\n            //SemestreAnoNome\\n            \\\"S\\\" & Text.From ( semestreNo ) & \\\" - \\\" & Text.From ( ano ), \\n\\n            //SemestreIndice \\n            semestreIndice, \\n\\n            //Semestre Offset \\n            semestreOffset, \\n\\n            //SemestreAnoNomeAtual \\n            if semestreOffset = 0 then \\\"Semestre Atual\\\" \\n                else if semestreOffset = -1 then \\\"Semestre Anterior\\\" \\n                else if semestreOffset = 1 then \\\"Próximo Semestre\\\" \\n                else semestreAno, \\n            \\n            //BimestreDoAnoNum \\n            bimestreNo, \\n\\n            //BimestreAnoNum \\n            ano * 100 + bimestreNo, \\n\\n            //BimestreAnoNome \\n            bimestreAno, \\n\\n            //BimestreIndice \\n            bimestreIndice, \\n\\n            //BimestrOffset \\n            bimestreOffset, \\n\\n            //BimestreAnoNomeAtual \\n            if bimestreOffset = 0 then \\\"Bimestre Atual\\\" \\n                else if bimestreOffset = -1 then \\\"Bimestre Anterior\\\" \\n                else if bimestreOffset = 1 then \\\"Próximo Bimestre\\\" \\n                else bimestreAno, \\n\\n            //FeriadoNome \\n            feriado, \\n\\n            //DiaUtilNum \\n            diaUtilNo, \\n\\n            //DiaUtilNome \\n            if diaUtilNo = 0 then \\\"Dia Não Útil\\\" else \\\"Dia Útil\\\", \\n            \\n            //EstacaoAnoNum \\n            estacaoAnoNo, \\n\\n            //EstacaoAnoNome \\n            if estacaoAnoNo = 1 then \\\"Outono\\\" \\n                else if estacaoAnoNo = 2 then \\\"Inverno\\\" \\n                else if estacaoAnoNo = 3 then \\\"Primavera\\\" \\n                else \\\"Verão\\\",\\n\\n            //MesFechamentoNum\\n            Date.Month ( dataReferenciaFechamento ),\\n\\n            //MesFechamentoNome\\n            Text.Proper ( Date.ToText ( dataReferenciaFechamento, [ Format = \\\"MMMM\\\", Culture = idioma ] ) ),\\n\\n            //MesFechamentoNomeAbrev\\n            Text.Proper ( Date.ToText ( dataReferenciaFechamento, [ Format = \\\"MMM\\\", Culture = idioma ] ) ),\\n\\n            //AnoFechamentoNum\\n            Date.Year ( dataReferenciaFechamento ),\\n\\n            //MesAnoFechamentoNum\\n            Date.Year ( dataReferenciaFechamento ) * 100 + Date.Month ( dataReferenciaFechamento ),\\n\\n            //MesAnoFechamentoNome\\n            Text.Proper ( Date.ToText ( dataReferenciaFechamento, [ Format = \\\"MMM/yy\\\", Culture = idioma ] ) ),\\n\\n            //DataFutura\\n            dataOffset > 0\\n\\n        }, \\n\\n    //Gera a tabela calendário \\n    calendario = #table ( \\n\\n        //Nomes e tipos das colunas \\n        type table [ \\n            DataIndice = Int64.Type, \\n            Data = date, \\n            DataOffset = Int64.Type, \\n            DataNomeAtual = text, \\n            AnoNum = Int64.Type, \\n            AnoInicio = date, \\n            AnoFim = date, \\n            AnoIndice = Int64.Type, \\n            AnoDecrescenteNome = Int64.Type, \\n            AnoDecrescenteNum = Int64.Type, \\n            AnoFiscal = Int64.Type, \\n            AnoOffset = Int64.Type, \\n            AnoNomeAtual = text, \\n            DiaDoMesNum = Int64.Type, \\n            DiaDoAnoNum = Int64.Type, \\n            DiaDaSemanaNum = Int64.Type, \\n            DiaDaSemanaNome = text, \\n            DiaDaSemanaNomeAbrev = text, \\n            DiaDaSemanaNomeIniciais = text,\\n            MesNum = Int64.Type, \\n            MesNome = text, \\n            MesNomeAbrev = text, \\n            MesNomeIniciais = text, \\n            MesAnoNum = Int64.Type, \\n            MesAnoNome = text, \\n            MesDiaNum = Int64.Type, \\n            MesDiaNome = text, \\n            MesInicio = date, \\n            MesFim = date, \\n            MesIndice = Int64.Type, \\n            MesOffset = Int64.Type, \\n            MesNomeAtual = text, \\n            MesNomeAbrevAtual = text, \\n            MesAnoNomeAtual = text, \\n            TrimestreNum = Int64.Type, \\n            TrimestreInicio = date, \\n            TrimestreFim = date, \\n            TrimestreAnoNum = Int64.Type,\\n            TrimestreAnoNome = text, \\n            TrimestreIndice = Int64.Type, \\n            TrimestreOffset = Int64.Type, \\n            TrimestreAnoNomeAtual = text, \\n            SemanaIsoNum = Int64.Type,\\n            AnoIsoNum = Int64.Type, \\n            SemanaIsoAnoNum = Int64.Type, \\n            SemanaIsoAnoNome = text, \\n            SemanaIsoInicio = date, \\n            SemanaIsoFim = date, \\n            SemanaIsoIndice = Int64.Type, \\n            SemanaIsoOffset = Int64.Type, \\n            SemanaIsoAnoNomeAtual = text, \\n            SemanaNum = Int64.Type, \\n            SemanaAnoNum = Int64.Type, \\n            SemanaAnoNome = text, \\n            SemanaInicio = date, \\n            SemanaFim = date, \\n            SemanaPeriodo = text,\\n            SemanaIndice = Int64.Type, \\n            SemanaOffset = Int64.Type, \\n            SemanaAnoNomeAtual = text, \\n            SemanaDoMesNum = Int64.Type, \\n            AnoSemanalNum = Int64.Type, \\n            MesSemanalNum = Int64.Type, \\n            MesSemanalNome = text, \\n            MesSemanalNomeAbrev = text, \\n            MesAnoSemanalNum = Int64.Type, \\n            MesAnoSemanalNome = text, \\n            SemanaDoMesPadraoNum = Int64.Type,\\n            SemanaDoMesAnoPadraoNome = text, \\n            SemanaDoMesAnoPadraoNum = Int64.Type, \\n            QuinzenaDoMesNum = Int64.Type,\\n            QuinzenaMesNum = Int64.Type, \\n            QuinzenaMesNome = text, \\n            QuinzenaMesAnoNum = Int64.Type, \\n            QuinzenaMesAnoNome = text, \\n            QuinzenaPeriodo = text,\\n            QuinzenaIndice = Int64.Type, \\n            QuinzenaOffset = Int64.Type, \\n            QuinzenaMesAnoNomeAtual = text, \\n            SemestreDoAnoNum = Int64.Type, \\n            SemestreAnoNum = Int64.Type, \\n            SemestreAnoNome = text, \\n            SemestreIndice = Int64.Type, \\n            SemestreOffset = Int64.Type, \\n            SemestreAnoNomeAtual = text,\\n            BimestreDoAnoNum = Int64.Type, \\n            BimestreAnoNum = Int64.Type, \\n            BimestreAnoNome = text, \\n            BimestreIndice = Int64.Type, \\n            BimestreOffset = Int64.Type, \\n            BimestreAnoNomeAtual = text, \\n            FeriadoNome = text, \\n            DiaUtilNum = Int64.Type, \\n            DiaUtilNome = text, \\n            EstacaoAnoNum = Int64.Type, \\n            EstacaoAnoNome = text, \\n            MesFechamentoNum = Int64.Type,\\n            MesFechamentoNome = text, \\n            MesFechamentoNomeAbrev = text, \\n            AnoFechamentoNum = Int64.Type,\\n            MesAnoFechamentoNum = Int64.Type,\\n            MesAnoFechamentoNome = text,\\n            DataFutura = Logical.Type \\n        ], \\n\\n        //Invoca função de transformação \\n        List.Transform ( datasRange, fxLinhaCalendario ) \\n    ),\\n    \\n    // Adiciona o número do dia útil do mês\\n    adDiaUtilMes = \\n    let\\n        tabela = Table.Buffer ( \\n            Table.SelectColumns ( \\n                calendario, \\n                { \\\"DiaDoMesNum\\\", \\\"MesIndice\\\", \\\"DiaUtilNum\\\" } \\n            ) \\n        ), \\n\\n        addDiaUtilMes = Table.AddColumn (\\n            tabela, \\n            \\\"DiaUtilDoMes\\\", \\n            each let \\n                __mesIndice = [MesIndice], \\n                __DiaDoMes = [DiaDoMesNum] \\n            in \\n                List.Sum ( \\n                    Table.SelectRows ( \\n                        tabela, \\n                        each [MesIndice] = __mesIndice  \\n                            and [DiaDoMesNum] <= __DiaDoMes \\n                    )\\n                    [DiaUtilNum]\\n                ), \\n            Int64.Type\\n        )[ [MesIndice], [DiaDoMesNum], [DiaUtilDoMes] ], \\n\\n        join = Table.Join (\\n            calendario, { \\\"MesIndice\\\", \\\"DiaDoMesNum\\\" },\\n            addDiaUtilMes, { \\\"MesIndice\\\", \\\"DiaDoMesNum\\\" }\\n        ) \\n    in\\n        join \\n            \\nin\\n    adDiaUtilMes\\nin\\n    dCalendario\\n// in dataInicial\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "d_placas",
      "lineageTag": "8284e4cf-657e-4d02-9abe-fb0efb5bc03e",
      "queryGroupId": "0a66c16a-f930-4837-98ad-1c79b1c61585",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    Fonte = Table.FromList(",
        "        List.Distinct(",
        "            List.Combine(",
        "                {",
        "                    f_viagens[Placa],",
        "                    f_manutencoes[Placa],",
        "                    f_ocorrencias[Placa]",
        "                }",
        "            )",
        "        ),",
        "        Splitter.SplitByNothing(),",
        "        type table[Placa = Text.Type]",
        "    )",
        "in",
        "    Fonte"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Fonte = Table.FromList(\\n        List.Distinct(\\n            List.Combine(\\n                {\\n                    f_viagens[Placa],\\n                    f_manutencoes[Placa],\\n                    f_ocorrencias[Placa]\\n                }\\n            )\\n        ),\\n        Splitter.SplitByNothing(),\\n        type table[Placa = Text.Type]\\n    )\\nin\\n    Fonte\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "o_atualizacao",
      "lineageTag": "74f4073a-7be7-4999-8251-be5071225a7c",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    Fonte = Table.FromValue(DateTime.FixedLocalNow()),",
        "    #\"Colunas Renomeadas\" = Table.RenameColumns(Fonte,{{\"Value\", \"ultima_atualizacao\"}}),",
        "    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"ultima_atualizacao\", type datetime}})",
        "in",
        "    #\"Tipo Alterado\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Fonte = Table.FromValue(DateTime.FixedLocalNow()),\\n    #\\\"Colunas Renomeadas\\\" = Table.RenameColumns(Fonte,{{\\\"Value\\\", \\\"ultima_atualizacao\\\"}}),\\n    #\\\"Tipo Alterado\\\" = Table.TransformColumnTypes(#\\\"Colunas Renomeadas\\\",{{\\\"ultima_atualizacao\\\", type datetime}})\\nin\\n    #\\\"Tipo Alterado\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "o_log_desenvolvimento",
      "lineageTag": "352272ad-2636-4905-a09d-59923cab185e",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"hZExa8MwEIX/ivCUgotlJ9AkW9qpQ6k7dQgZLvIlOSrpiiQT2l/fs53EaQkUhHRIeu8+Pa3XWTUvSl1UuppleVbOllrL6MqH5fRUvnCDFvboVMNRNdDNhp2q+YjhrcXwlW3yv06jvJxfyjrgJwQwwGKlwG0JfULV7ak9JTVhb8ljLjsxQVRy9EvhOeGW+WNQpABbsAcIPY3o7waOxRWHnl9epBeXsg7kkAJ3Qkepl031v0GMD1b36inQgIXiYlvf4zbi6yNjHAh3YMhSEkJQ5nxfLjpsSNYbfUfGqrzCvRnbgR3ybkfmlKBhn8i30o3P2bCSXzMQQU3IS6T2bPJOvuFjLOrH5+K19yhWqQVL32AEX5Lc/AA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Data = _t, Inicio = _t, Fim = _t, Observacao = _t]),",
        "    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Data\", type date}, {\"Inicio\", type time}, {\"Fim\", type time}}),",
        "    #\"Personalização Adicionada\" = Table.AddColumn(#\"Tipo Alterado\", \"Personalizar\", each ([Fim] - [Inicio]), type time),",
        "    #\"Minutos Totais Inseridos\" = Table.AddColumn(#\"Personalização Adicionada\", \"Total de Minutos\", each Duration.TotalMinutes([Personalizar]), type number),",
        "    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Minutos Totais Inseridos\",{\"Personalizar\"})",
        "in",
        "    #\"Colunas Removidas\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"fZG9TgMxEIRfZXVVkILO+ZES0gEVBeKoKKIUG98mWWF7ke1TBE/P3jkREBCNR7I942/H63U1XdYTU0/NdF6Nq8l8ZUyvi9Ws10dpyeGePLSSoMV+teKhkSPF547ie7UZX2acvJNl0SbSG0a0KBoC6LdMIRP0e7DnDCMJjgONdSdlTKBHPxxBMm1FXosjR9yiO2AcONR/VQhuvhGYZZnC3BRtInviKL3Fcx4MM/PP2F/jwTXcRy4opH7XhQGx1cSQhFKh2qFlx1mpEOz5vl701LLq7xfN4hLxz5IO4kl2O7anvqyEzKHTd+TchID+jsWEMOKgBbpzyAuHVo6pbu4e6qcho77NHTr+QKvg2tvmEw==\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Data = _t, Inicio = _t, Fim = _t, Observacao = _t]),\\n    #\\\"Coluna Mesclada Inserida\\\" = Table.AddColumn(Fonte, \\\"Ini\\\", each Text.Combine({Text.From([Data], \\\"pt-BR\\\"), Text.From([Inicio], \\\"pt-BR\\\")}, \\\" \\\"), type text),\\n    #\\\"Coluna Mesclada Inserida1\\\" = Table.AddColumn(#\\\"Coluna Mesclada Inserida\\\", \\\"Fin\\\", each Text.Combine({Text.From([Data], \\\"pt-BR\\\"), Text.From([Fim], \\\"pt-BR\\\")}, \\\" \\\"), type text),\\n    #\\\"Tipo Alterado2\\\" = Table.TransformColumnTypes(#\\\"Coluna Mesclada Inserida1\\\",{{\\\"Ini\\\", type datetime}, {\\\"Fin\\\", type datetime}})\\nin\\n    #\\\"Tipo Alterado2\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "d_status_viagem",
      "lineageTag": "fbe5a8e2-5e71-4bd8-ac05-31ce133f3bbe",
      "queryGroupId": "0a66c16a-f930-4837-98ad-1c79b1c61585",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    Fonte = Table.FromList(",
        "        List.Distinct(",
        "            List.Combine(",
        "                {",
        "                    f_viagens[Status viagem]",
        "                }",
        "            )",
        "        ),",
        "        Splitter.SplitByNothing(),",
        "        type table[status_viagem = Text.Type]",
        "    )",
        "in",
        "    Fonte"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Fonte = Table.FromList(\\n        List.Distinct(\\n            List.Combine(\\n                {\\n                    f_viagens[Status viagem]\\n                }\\n            )\\n        ),\\n        Splitter.SplitByNothing(),\\n        type table[status_viagem = Text.Type]\\n    )\\nin\\n    Fonte\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "d_origem",
      "lineageTag": "6e7a2d33-feab-4b82-b763-44075885d5ac",
      "queryGroupId": "0a66c16a-f930-4837-98ad-1c79b1c61585",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    Fonte = Table.FromList(",
        "        List.Distinct(",
        "            List.Combine(",
        "                {",
        "                    f_viagens[Origem]",
        "                }",
        "            )",
        "        ),",
        "        Splitter.SplitByNothing(),",
        "        type table[Origem = Text.Type]",
        "    )",
        "in",
        "    Fonte"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Fonte = Table.FromList(\\n        List.Distinct(\\n            List.Combine(\\n                {\\n                    f_viagens[Origem]\\n                }\\n            )\\n        ),\\n        Splitter.SplitByNothing(),\\n        type table[Origem = Text.Type]\\n    )\\nin\\n    Fonte\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "d_destino",
      "lineageTag": "8eca71d7-af13-45dd-ac3c-1c1b4540b219",
      "queryGroupId": "0a66c16a-f930-4837-98ad-1c79b1c61585",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    Fonte = Table.FromList(",
        "        List.Distinct(",
        "            List.Combine(",
        "                {",
        "                    f_viagens[Destino]",
        "                }",
        "            )",
        "        ),",
        "        Splitter.SplitByNothing(),",
        "        type table[Destino = Text.Type]",
        "    )",
        "in",
        "    Fonte"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Fonte = Table.FromList(\\n        List.Distinct(\\n            List.Combine(\\n                {\\n                    f_viagens[Destino]\\n                }\\n            )\\n        ),\\n        Splitter.SplitByNothing(),\\n        type table[Destino = Text.Type]\\n    )\\nin\\n    Fonte\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "d_problema_causa",
      "lineageTag": "7032733a-818a-470b-a008-a7cf35d813c2",
      "queryGroupId": "0a66c16a-f930-4837-98ad-1c79b1c61585",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    Fonte = Table.Distinct(",
        "        f_ocorrencias[ ",
        "            [Problema],",
        "            [Causa]",
        "        ]",
        "    )",
        "in",
        "    Fonte"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Fonte = Table.Distinct(\\n        f_ocorrencias[ \\n            [Problema],\\n            [Causa]\\n        ]\\n    )\\nin\\n    Fonte\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "dir_xlsx",
      "lineageTag": "d2fd0231-e5f0-4c92-9c23-5110e699a470",
      "navigationStepName": "Navegação",
      "text": [
        "\"C:\\PowerBI\\DesafioMoby\\dados\\\" meta [IsParameterQuery=true, List={\"C:\\\\Users\\\\mcscunha\\\\Documents\\\\PowerBI\\\\desafio_rodotransportes\\\\dados\\\\\", \"C:\\\\PowerBI\\\\DesafioMoby\\\\dados\\\"}, DefaultValue=\"C:\\\\Users\\\\mcscunha\\\\Documents\\\\PowerBI\\\\desafio_rodotransportes\\\\dados\\\\\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "fx_horas_uteis",
      "navigationStepName": "Navegação",
      "text": [
        "// Função para calcular horas úteis",
        "(Chegada as datetime, Saida as nullable datetime) =>",
        "let",
        "    // Definição dos horários úteis diários",
        "    HoraInicio = #time(08, 0, 0),",
        "    HoraFim = #time(18, 0, 0),",
        "    DiaInicio = DateTime.From(DateTime.Date(Chegada) & HoraInicio),",
        "    DiaFim = DateTime.From(DateTime.Date(Chegada) & HoraFim),",
        "",
        "    // Casos sem saída",
        "    HoraSaida = if Saida = null then Saida else Saida,",
        "",
        "    // Cálculo das horas trabalhadas",
        "    Resultado =",
        "        if Chegada > HoraSaida then",
        "            // Caso 1: Saída é anterior à entrada (inconsistência)",
        "            let",
        "                ChegadaTemp = Chegada,",
        "                Chegada = Saida,",
        "                Saida = ChegadaTemp,",
        "            in",
        "        else if DateTime.Date(Chegada) = DateTime.Date(HoraSaida) then",
        "            // Caso 2: Entrada e saída no mesmo dia",
        "            let",
        "                HoraInicial = if DateTime.Time(Chegada) < HoraInicio then DiaInicio else Chegada,",
        "                HoraFinal = if DateTime.Time(HoraSaida) > HoraFim then DiaFim else HoraSaida,",
        "                HorasUteis = Duration.TotalMinutes(HoraFinal - HoraInicial)",
        "            in",
        "                if HorasUteis < 0 then 0 else HorasUteis",
        "        else",
        "            // Caso 3: Entrada e saída em dias diferentes",
        "            let",
        "                // Primeiro dia: horas úteis entre chegada e fim do dia",
        "                HoraInicial = if DateTime.Time(Chegada) < HoraInicio then DiaInicio else Chegada,",
        "                HorasPrimeiroDia = if DateTime.Time(Chegada) < HoraFim then Duration.TotalMinutes(DiaFim - HoraInicial) else 0,",
        "",
        "                // Último dia: horas úteis entre início do dia e hora de saída",
        "                DiaUltimo = DateTime.Date(HoraSaida),",
        "                DiaUltimoInicio = DateTime.From(DiaUltimo & HoraInicio),",
        "                DiaUltimoFim = DateTime.From(DiaUltimo & HoraFim),",
        "                HoraFinal = if DateTime.Time(HoraSaida) > HoraFim then DiaUltimoFim else HoraSaida,",
        "                HorasUltimoDia = if DateTime.Time(HoraSaida) > HoraInicio then Duration.TotalHours(HoraFinal - DiaUltimoInicio) else 0,",
        "",
        "                // Dias completos intermediários: cada dia útil vale 10 horas",
        "                DiasIntermediarios = List.Difference({DateTime.Date(Chegada)..DateTime.Date(HoraSaida)}, {DateTime.Date(Chegada), DateTime.Date(HoraSaida)}),",
        "                HorasIntermediarias = List.Count(DiasIntermediarios) * 10,",
        "",
        "                TotalHorasUteis = HorasPrimeiroDia + HorasIntermediarias + HorasUltimoDia",
        "            in",
        "                TotalHorasUteis",
        "in",
        "    Resultado"
      ],
      "resultType": "Exception"
    }
  ],
  "queryGroups": [
    {
      "name": "dimensoes",
      "id": "0a66c16a-f930-4837-98ad-1c79b1c61585",
      "description": ""
    },
    {
      "name": "fato",
      "id": "5f883ed9-cd43-4998-b62e-fe07c6616bb7",
      "order": 1,
      "description": ""
    }
  ],
  "culture": "pt-BR",
  "firewallEnabled": true
}